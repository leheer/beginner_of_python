#创建一个列表 列表用[] 来创建
"""列表：
列表是一种在Python中常用的数据结构，用于存储一组有序的元素。它可以包含任意类型的对象，如整数、字符串、浮点数、布尔值等，甚至可以包含其他列表。
在Python中，列表使用方括号 [] 来表示，元素之间使用逗号进行分隔。例如，下面是一个包含整数和字符串的列表示例：
my_list = [1, 2, 3, "apple", "banana"]
列表是可变的，这意味着你可以通过索引访问和修改列表中的元素。列表的索引从0开始，即第一个元素的索引为0，第二个元素的索引为1，以此类推。你可以使用索引来获取列表中特定位置的元素，也可以使用切片来获取列表的子列表。
列表还提供了许多内置的方法和操作，以方便对列表进行增加、删除、排序、迭代等操作。以下是一些常用的列表操作：
len(list): 返回列表的长度（即包含的元素个数）。
list.append(item): 在列表末尾添加一个新的元素。
list.insert(index, item): 在指定索引位置插入一个新的元素。
list.remove(item): 删除列表中第一个匹配的元素。
list.pop(index): 移除并返回指定索引位置的元素。
list.sort(): 对列表进行升序排序。
list.reverse(): 反转列表中的元素顺序。
列表是一种非常灵活和常用的数据结构，它可以用于存储和操作各种类型的数据。它在处理多个相关元素时特别有用，例如存储学生名单、商品清单、传感器读数等。通过列表，你可以方便地对数据进行组织、访问和修改，从而实现更复杂的编程任务。
"""

fav_movies = ["流浪地球","流浪地球2","流浪地球3"]

"""for 表示循环语句 FOR循环是一种常见的循环结构，用于重复执行特定的代码块。它在许多编程语言中都有类似的实现，包括Python。
FOR循环的基本语法如下：
for 变量 in 序列:
    执行的代码块
    其中，变量表示在每次循环中用于迭代的值，而序列则是被迭代的对象，可以是列表、元组、字符串或其他可迭代对象。在每次循环迭代时，变量会被赋值为序列中的下一个元素，并执行相应的代码块。
在执行FOR循环时，代码块中的语句会按照顺序执行，直到完成所有的迭代。每次循环迭代时，都可以通过访问变量来获取当前迭代的值，并进行相应的操作。
FOR循环提供了一种方便的方式来遍历序列中的元素，无需手动追踪索引或循环计数器。它使代码更加简洁和可读，并且通常用于处理集合、列表、数组等需要逐个访问元素的情况。
在Python中，FOR循环还可以结合其他关键字和函数来实现更复杂的迭代操作，例如使用range()函数生成一系列数字进行循环，使用enumerate()函数同时获取索引和元素值等。
总之，FOR循环是一种重要的控制结构，用于在编程中重复执行特定的代码块，并对序列中的元素进行迭代处理。它提供了一种简洁和有效的方式来处理重复任务，并且在各种编程场景中广泛应用。
""" 

for each_flick in fav_movies:
    print(each_flick)
